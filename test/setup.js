// Generated by CoffeeScript 1.10.0
(function() {
  var es, exec, rds, request, server, sockjs, spawn, test;

  test = require("tapes");

  request = require("request");

  es = require("event-stream");

  sockjs = require("sockjs-client");

  exec = require("child_process").exec;

  spawn = require('better-spawn');

  rds = null;

  server = function(cb) {
    return exec("rm -rf data/rides", function(err, out) {
      rds = spawn("node ./server.js");
      rds.stderr.pipe(process.stderr);
      return setTimeout(cb, 1000);
    });
  };

  module.exports = function(title, run) {
    return test(title, function(t) {
      t.beforeEach(function(t) {
        return server(function() {
          return t.end();
        });
      });
      t.afterEach(function(t) {
        rds.close();
        return t.end();
      });
      t.test.post = function(ride, cb) {
        return request.post("http://localhost:5000", function(err, r, res) {
          return cb(JSON.parse(res));
        }).end(JSON.stringify(ride));
      };
      t.test.get = function(id, cb) {
        return request("http://localhost:5000/rides/" + id, function(err, r, res) {
          return cb(JSON.parse(res));
        });
      };
      t.test.find = function(route, cb) {
        return request({
          url: "http://localhost:5000" + route,
          headers: {
            "Accept": "application/json"
          }
        }, function(err, r, res) {
          return cb(JSON.parse(res));
        });
      };
      t.test.connect = function(query, cb) {
        var sock;
        sock = sockjs("http://localhost:5000/sockjs", {
          'force new connection': true
        });
        return sock.onopen = function() {
          sock.send(query);
          return sock.onmessage = function(msg) {
            var ride;
            ride = JSON.parse(msg.data);
            if (ride.route) {
              return cb(ride);
            }
          };
        };
      };
      run(t.test);
      return t.end();
    });
  };

}).call(this);
